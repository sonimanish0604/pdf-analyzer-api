name: release

on:
  push:
    tags:
      - 'v*'   # e.g., v1.0.0

permissions:
  contents: write
  packages: write

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # (Optional) Python CI — keep this aligned with your project
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt || true
      - run: pip install -r requirements-dev.txt || true
      - run: |
          if [ -f pyproject.toml ] || [ -d tests ]; then
            echo "Running tests..."
            pytest -q --maxfail=1 --disable-warnings || true
          else
            echo "No tests found, continuing."
          fi

      # Build and push Docker image to GHCR tagged with version + sha
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:sha-${{ github.sha }}

      # Extract release notes from CHANGELOG.md
      - name: Extract release notes
        run: scripts/extract_changelog.sh "${GITHUB_REF_NAME}" CHANGELOG.md CHANGELOG_RELEASE.md

      # Create (or update) the GitHub Release with notes
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: CHANGELOG_RELEASE.md
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # (Optional) Trigger Render production deploy via deploy hook secret
       - name: Deploy to Render (prod)
         if: always()
         run: curl -fsS -X POST "$RENDER_PROD_HOOK"
         env:
           RENDER_PROD_HOOK: ${{ secrets.RENDER_PROD_HOOK }}
  e2e-smoke:
    runs-on: ubuntu-latest
    needs: test-build   # or the job that runs your deploy step
    steps:
      - name: Wait for Render to finish rolling out
        run: sleep 12

      - name: Health check (prod)
        run: |
          curl -fsS https://pdf-analyzer-api-production.onrender.com/v1/health | jq .

      # (Optional) Analyze a tiny PDF after you add a sample + API key secret
      # - name: Analyze sample PDF (prod)
      #   run: |
      #     curl -fsS -X POST https://pdf-analyzer-api-production.onrender.com/v1/analyze \
      #       -H "x-api-key: $API_KEY" \
      #       -F "file=@samples/clean.pdf;type=application/pdf" | jq .
      #   env:
      #     API_KEY: ${{ secrets.PROD_API_KEY }}

  e2e-smoke:
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Render rollout
        run: sleep 12

      - name: Health check (prod)
        run: |
          curl -fsS https://pdf-analyzer-api-production.onrender.com/v1/health | tee health.json
          # Assert health JSON is ok and env is prod
          jq -e '.ok == true and .env == "prod"' health.json >/dev/null

  e2e-analyze:
    runs-on: ubuntu-latest
    needs: e2e-smoke
    strategy:
      fail-fast: false
      matrix:
        cases:
          - name: clean
            file: samples/pdfanalyzer-testdoc.pdf
            # Expect no risky flags
            assert: '.summary.encrypted==false and .summary.embedded_javascript==false and .summary.embedded_files==false and .summary.embeddedurl==false and .summary.fakepdf==false'
          - name: encrypted
            file: samples/pdfanalyzer-passwordprotect.pdf
            assert: '.summary.encrypted==true'
          - name: has_js
            file: samples/pdf_with_js_alert.pdf
            assert: '.summary.embedded_javascript==true'
          - name: embedded
            file: samples/pdfanalyzer-embedword.pdf
            assert: '.summary.embedded_files==true'
          - name: has_url
            file: samples/pdfanalyzer-embeddedurl.pdf
            assert: '.summary.embeddedurl==true'
          - name: fakepdf
            file: samples/pdfanalyzer-mimicfakepdf.pdf
            assert: '.summary.fakepdf==true'

    steps:
      - uses: actions/checkout@v4

      - name: Ensure sample exists — ${{ matrix.cases.name }}
        run: |
          test -f "${{ matrix.cases.file }}" || (echo "Missing ${{ matrix.cases.file }}"; exit 1)

      - name: Analyze ${{ matrix.cases.name }} (prod)
        env:
          API_KEY: ${{ secrets.PROD_API_KEY }}
        run: |
          set -e
          OUT=$(curl -fsS -X POST https://pdf-analyzer-api-production.onrender.com/v1/analyze \
            -H "x-api-key: $API_KEY" \
            -F "file=@${{ matrix.cases.file }};type=application/pdf")
          echo "$OUT" | jq .
          echo "$OUT" | jq -e '${{ matrix.cases.assert }}' >/dev/null
